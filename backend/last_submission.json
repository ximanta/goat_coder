{
  "language_id": 4,
  "problem_id": "123",
  "structure": {
    "problem_name": "find_longest_palindrome",
    "function_name": "find_longest_palindrome",
    "input_structure": [
      {
        "Input_Field": "List[str] strings"
      }
    ],
    "output_structure": {
      "Output_Field": "str result"
    }
  },
  "complete_source": "import java.util.*;\n            import java.io.*;\n            import java.text.*;\n            import java.time.*;\n            import java.math.*;\n            import java.util.regex.*;\n            \npublic class Main {\n    public String findLongestPalindrome(String[] strings) {\n/*DO NOT modify this method.*/\n\n    // Your implementation code goes here\n    \n    return null; // Replace with your return statement\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        Main solution = new Main();\n        \n        // Parse input\n        List<String> lines = new ArrayList<>();\n        while(scanner.hasNextLine()){\n            String line = scanner.nextLine();\n            if(line.trim().isEmpty()) break;\n            lines.add(line);\n        }\n        String[] strings = lines.toArray(new String[0]);\n        \n        // Call the solution function\n        String result = solution.findLongestPalindrome(strings);\n        \n        // Print the result\n        System.out.println(result);\n        scanner.close();\n    }\n}",
  "test_cases": [
    {
      "test_case_number": 1,
      "input": "hello\nracecar\nworld\nmadam\napple",
      "expected_output": "racecar"
    },
    {
      "test_case_number": 2,
      "input": "noon\ncivic\ndeified\nlevel\nradar",
      "expected_output": "deified"
    },
    {
      "test_case_number": 3,
      "input": "python\njava\njavascript\ntypescript",
      "expected_output": ""
    },
    {
      "test_case_number": 4,
      "input": "a\nb\ncba\nabc\naa",
      "expected_output": "aa"
    },
    {
      "test_case_number": 5,
      "input": "abba\nabcba\nabba\nxyz",
      "expected_output": "abcba"
    }
  ]
}