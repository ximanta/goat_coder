{
  "language_id": 4,
  "problem_id": "123",
  "structure": {
    "problem_name": "rotate_array",
    "function_name": "rotate_array",
    "input_structure": [
      {
        "Input_Field": "List[int] array"
      },
      {
        "Input_Field": "int k"
      }
    ],
    "output_structure": {
      "Output_Field": "List[int] result"
    }
  },
  "complete_source": "import java.util.*;\nimport java.util.regex.*;\n\npublic class Main {\n    public int[] rotateArray(int[] array, int k) {\n/*DO NOT modify this method.*/\n\n    int n = array.length;\n    if (n == 0) return array; // Handle empty array case\n    \n    k = k % n; // Handle cases where k is greater than the length of the array\n    if (k == 0) return array; // No rotation needed if k is 0\n\n    // Reverse the entire array\n    reverse(array, 0, n - 1);\n    // Reverse the first k elements\n    reverse(array, 0, k - 1);\n    // Reverse the remaining elements\n    reverse(array, k, n - 1);\n\n    return array;\n}\n\n// Helper method to reverse a portion of the array\nprivate void reverse(int[] array, int start, int end) {\n    while (start < end) {\n        int temp = array[start];\n        array[start] = array[end];\n        array[end] = temp;\n        start++;\n        end--;\n    }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        Main solution = new Main();\n        \n        // Parse input\n        String[] input0 = scanner.nextLine().split(\" \");\n        int[] array = new int[input0.length];\n        for(int i = 0; i < input0.length; i++) {\n            array[i] = Integer.parseInt(input0[i]);\n        }\n        int k = Integer.parseInt(scanner.nextLine());\n        \n        // Call the solution function\n        int[] result = solution.rotateArray(array, k);\n        \n        // Print the result\n        System.out.println(Arrays.toString(result));\n        \n        scanner.close();\n    }\n}",
  "test_cases": [
    {
      "test_case_number": 1,
      "input": "1 2 3 4 5\n2",
      "expected_output": "[4, 5, 1, 2, 3]"
    },
    {
      "test_case_number": 2,
      "input": "10 20 30 40 50\n3",
      "expected_output": "[30, 40, 50, 10, 20]"
    },
    {
      "test_case_number": 3,
      "input": "7 8 9 10\n1",
      "expected_output": "[10, 7, 8, 9]"
    },
    {
      "test_case_number": 4,
      "input": "1 2 3\n6",
      "expected_output": "[2, 3, 1]"
    },
    {
      "test_case_number": 5,
      "input": "\n1",
      "expected_output": "[]"
    },
    {
      "test_case_number": 6,
      "input": "1\n0",
      "expected_output": "[1]"
    }
  ]
}